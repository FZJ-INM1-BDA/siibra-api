name: '[docker image prod]'

on:
  release:
    types:
    - published

env:
  OKD_PROJECT: siibra-api
  OKD_ENDPOINT: https://okd.hbp.eu:443
  OKD_SECRET: ${{ secrets.OKD_PROD_SECRET }}
  DOCKER_REGISTRY: 'docker-registry.ebrains.eu/siibra/'
  DOCKER_IMG: 'siibra-api'

jobs:
  build-docker-img:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: 'Set DOCKER_IMAGE_TAG'
      run: |
        if [[ "$GITHUB_REF" = *"rc"* ]]
        then
          # if release contains rc, set img tag to rc
          DOCKER_IMAGE_TAG=rc
        else
          # if release contains rc, otherwise, set img tag to stable
          DOCKER_IMAGE_TAG=stable
        fi

        echo "DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"
        echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV

    - name: 'Build docker image'
      run: |
        DOCKER_BUILT_TAG=${{ env.DOCKER_REGISTRY }}${{ env.DOCKER_IMG }}:$DOCKER_IMAGE_TAG
        echo "Building $DOCKER_BUILT_TAG"
        docker build \
          -t $DOCKER_BUILT_TAG \
          .
        echo "Successfully built $DOCKER_BUILT_TAG"
        echo "DOCKER_BUILT_TAG=$DOCKER_BUILT_TAG" >> $GITHUB_ENV

    - name: 'Push to docker registry'
      run: |
        echo "Login to docker registry"
        docker login \
          -u '${{ secrets.EBRAINS_DOCKER_REG_USER }}' \
          -p '${{ secrets.EBRAINS_DOCKER_REG_TOKEN }}' \
          docker-registry.ebrains.eu
        echo "Pushing $DOCKER_BUILT_TAG"
        docker push $DOCKER_BUILT_TAG
    
    # Only push versioned tag to registry if
    # - it is a release event
    # - the release event is *not* a release candidate (rc)
    - name: 'Push versioned tag to registry'
      if: |
        github.event_name == 'release' &&
        !contains(github.ref, 'rc')
      run: |
        
        echo "Login to docker registry"
        docker login \
          -u '${{ secrets.EBRAINS_DOCKER_REG_USER }}' \
          -p '${{ secrets.EBRAINS_DOCKER_REG_TOKEN }}' \
          docker-registry.ebrains.eu

        BREAK=5
        VERSION=$(grep -Po '^__version__.*?"\K[\w.]+' app/__init__.py)
        while [[ "$VERSION" == *"."* ]]
        do
          if [[ "$BREAK" == "0" ]]
          then
            echo "Fuse broke!"
            exit 1
          fi
          VERSIONED_DOCKERTAG=${{ env.DOCKER_REGISTRY }}${{ env.DOCKER_IMG }}:$VERSION
          echo "tagging and pushing $VERSIONED_DOCKERTAG"
          docker tag $DOCKER_BUILT_TAG $VERSIONED_DOCKERTAG
          docker push $VERSIONED_DOCKERTAG

          echo "Push successful... Incrementing version & break"
          VERSION=$(echo $VERSION | sed -e 's/\.\w*$//g')
          BREAK=$(( "$BREAK" - 1 ))
        done
        echo "Done"

  deploy-on-okd:
    needs: build-docker-img
    if: success()
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
    - name: 'Set env var'
      run: |
        OKD_ENDPOINT=${{ env.OKD_PROJECT }}
        OKD_SECRET=${{ env.OKD_SECRET }}
        DEPLOY_SITE_POSTFIX=""

        if [[ "$GITHUB_REF" = *"rc"* ]]
        then
          # if release contains rc, set img tag to rc
          DOCKER_IMAGE_TAG=rc
        else
          # if release contains rc, otherwise, set img tag to stable
          DOCKER_IMAGE_TAG=stable
        fi

        echo "OKD_ENDPOINT=$OKD_ENDPOINT" >> $GITHUB_ENV
        echo "OKD_SECRET=$OKD_SECRET" >> $GITHUB_ENV
        echo "DEPLOY_SITE_POSTFIX=$DEPLOY_SITE_POSTFIX" >> $GITHUB_ENV

        echo "DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"
        echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV

    - name: 'Login via oc cli & deploy'
      run: |
        oc login ${OKD_ENDPOINT} --token=${OKD_SECRET}
        oc project ${{ env.OKD_PROJECT }}

        # sanitise docker_img_tag, even though it shouldn't be necessary (valid tags are latest | rc | stable )
        DEPLOY_FLAVOUR=$(echo ${DOCKER_IMAGE_TAG//[_\/]/} | awk '{ print tolower($0) }')
        echo "Working docker tag: $DOCKER_IMAGE_TAG, sanitized flavour: $DEPLOY_FLAVOUR"
        
        # check if the deploy already exist
        if oc get dc siibra-api-branch-deploy-$DEPLOY_FLAVOUR; then
          # trigger redeploy if deployconfig exists already
          echo "dc siibra-api-branch-deploy-$DEPLOY_FLAVOUR already exist, redeploy..."
          oc rollout latest dc/siibra-api-branch-deploy-$DEPLOY_FLAVOUR
        else 
          # create new app if deployconfig does not yet exist
          echo "dc siibra-api-branch-deploy-$DEPLOY_FLAVOUR does not yet exist, create new app..."
          oc new-app --template siibra-api-branch-deploy \
            -p DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG \
            -p DEPLOY_SITE_POSTFIX=$DEPLOY_SITE_POSTFIX \
            -p DEPLOY_FLAVOUR=$DEPLOY_FLAVOUR
        fi

  
      # - name: 'Update status badge'
      #   if: success()
      #   run: |
      #     curl -v \
      #       -X POST \
      #       -H "Authorization: Token ${{ secrets.WORKFLOW_TOKEN }}" \
      #       -H 'accept: application/vnd.github.v3+json' \
      #       ${GITHUB_API_ROOT}/statuses/${GITHUB_SHA} \
      #       -d '{
      #         "target_url":"https://siibra-api-${{ env.SANITIZED_BRANCH_NAME }}.apps-dev.hbp.eu/",
      #         "name": "Deployed at OKD",
      #         "state": "success"
      #       }'