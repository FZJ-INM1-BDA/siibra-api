name: '[docker image]'

on:
  push:
    branches:
    - master

jobs:
  build-docker-img:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: 'docker-registry.ebrains.eu/siibra/'
      DOCKER_IMG: 'siibra-api'
    steps:
    - uses: actions/checkout@v2
    - name: 'Set DOCKER_IMG_TAG'
      run: |
        echo "Using github.ref: $GITHUB_REF"
        echo "DOCKER_IMG_TAG=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    - name: 'Build docker image'
      run: |
        DOCKER_BUILT_TAG=${{ env.DOCKER_REGISTRY }}${{ env.DOCKER_IMG }}:$DOCKER_IMG_TAG
        echo "Building $DOCKER_BUILT_TAG"
        docker build \
          -t $DOCKER_BUILT_TAG \
          .
        echo "Successfully built $DOCKER_BUILT_TAG"
        echo "DOCKER_BUILT_TAG=$DOCKER_BUILT_TAG" >> $GITHUB_ENV

    - name: 'Push to docker registry'
      run: |
        echo "Login to docker registry"
        docker login \
          -u '${{ secrets.EBRAINS_DOCKER_REG_USER }}' \
          -p '${{ secrets.EBRAINS_DOCKER_REG_TOKEN }}' \
          docker-registry.ebrains.eu
        echo "Pushing $DOCKER_BUILT_TAG"
        docker push $DOCKER_BUILT_TAG
        
  trigger-deploy:
    if: success()
    runs-on: ubuntu-latest
    env:
      OKD_ENDPOINT: https://okd-dev.hbp.eu:443
      OKD_PROJECT: siibra-api
      OKD_SECRET: ${{ secrets.OKD_DEV_SECRET }}
      
    needs: build-docker-img
    steps:
      - uses: actions/checkout@v2
      - name: Set env var
        run: |
          echo "Using github.ref: $GITHUB_REF"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
      - name: 'Login via oc cli & deploy'
        run: |
          oc login ${{ env.OKD_ENDPOINT }} --token=${{ env.OKD_SECRET }}
          oc project ${{ env.OKD_PROJECT }}

          # sanitized branchname == remove _ / and lowercase everything
          SANITIZED_BRANCH_NAME=$(echo ${BRANCH_NAME//[_\/]/} | awk '{ print tolower($0) }')
          echo "SANITIZED_BRANCH_NAME=$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV
          echo "Working branch name: $BRANCH_NAME, sanitized branch name: $SANITIZED_BRANCH_NAME"

          # check if the deploy already exist
          if oc get dc siibra-api-branch-deploy-$SANITIZED_BRANCH_NAME; then
            # trigger redeploy if deployconfig exists already
            echo "dc siibra-api-branch-deploy-$SANITIZED_BRANCH_NAME already exist, redeploy..."
            oc rollout latest dc/siibra-api-branch-deploy-$SANITIZED_BRANCH_NAME
          else 
            # create new app if deployconfig does not yet exist
            echo "dc siibra-api-branch-deploy-$SANITIZED_BRANCH_NAME does not yet exist, create new app..."
            oc new-app --template siibra-api-branch-deploy \
              -p BRANCH_NAME=$BRANCH_NAME \
              -p SANITIZED_BRANCH_NAME=$SANITIZED_BRANCH_NAME
          fi
      # - name: 'Update status badge'
      #   if: success()
      #   run: |
      #     curl -v \
      #       -X POST \
      #       -H "Authorization: Token ${{ secrets.WORKFLOW_TOKEN }}" \
      #       -H 'accept: application/vnd.github.v3+json' \
      #       ${GITHUB_API_ROOT}/statuses/${GITHUB_SHA} \
      #       -d '{
      #         "target_url":"https://siibra-api-${{ env.SANITIZED_BRANCH_NAME }}.apps-dev.hbp.eu/",
      #         "name": "Deployed at OKD",
      #         "state": "success"
      #       }'
